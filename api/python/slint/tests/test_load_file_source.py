# Copyright Â© SixtyFPS GmbH <info@slint.dev>
# SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-2.0 OR LicenseRef-Slint-Software-3.0

# Generated by slint.codegen from test-load-file-source.slint
from __future__ import annotations

import importlib.resources as _resources
import os
import types
from contextlib import nullcontext as _nullcontext
from pathlib import Path
from typing import Any

import slint

__all__ = [
    "Diag",
    "App",
    "Secret_Struct",
    "MyData",
    "ImageFit",
    "TextHorizontalAlignment",
    "SortOrder",
    "PointerEventKind",
    "ImageRendering",
    "ImageTiling",
    "OperatingSystemType",
    "InputType",
    "Orientation",
    "TextWrap",
    "ScrollBarPolicy",
    "ImageVerticalAlignment",
    "PointerEventButton",
    "TextOverflow",
    "LayoutAlignment",
    "StandardButtonKind",
    "AccessibleRole",
    "EventResult",
    "MouseCursor",
    "AnimationDirection",
    "TextVerticalAlignment",
    "TextStrokeStyle",
    "LineCap",
    "ImageHorizontalAlignment",
    "FocusReason",
    "FillRule",
    "ColorScheme",
    "PathEvent",
    "TestEnum",
    "DialogButtonRole",
    "PopupClosePolicy",
    "MyDiag",
    "Public_Struct",
]

_MODULE_DIR = Path(__file__).parent

_SLINT_RESOURCE = "test-load-file-source.slint"


def _load() -> types.SimpleNamespace:
    """Load the compiled Slint module for this package."""
    package = __package__ or (__spec__.parent if __spec__ else None)
    if package:
        ctx = _resources.as_file(_resources.files(package).joinpath(_SLINT_RESOURCE))
    else:
        ctx = _nullcontext(Path(__file__).with_name(_SLINT_RESOURCE))
    with ctx as slint_path:
        include_paths: list[os.PathLike[Any] | Path] | None = None
        library_paths: dict[str, os.PathLike[Any] | Path] | None = None
        return slint.load_file(
            path=slint_path,
            quiet=True,
            style=None,
            include_paths=include_paths,
            library_paths=library_paths,
            translation_domain=None,
        )


_module = _load()

Diag = _module.Diag
App = _module.App
Secret_Struct = _module.Secret_Struct
MyData = _module.MyData
ImageFit = _module.ImageFit
TextHorizontalAlignment = _module.TextHorizontalAlignment
SortOrder = _module.SortOrder
PointerEventKind = _module.PointerEventKind
ImageRendering = _module.ImageRendering
ImageTiling = _module.ImageTiling
OperatingSystemType = _module.OperatingSystemType
InputType = _module.InputType
Orientation = _module.Orientation
TextWrap = _module.TextWrap
ScrollBarPolicy = _module.ScrollBarPolicy
ImageVerticalAlignment = _module.ImageVerticalAlignment
PointerEventButton = _module.PointerEventButton
TextOverflow = _module.TextOverflow
LayoutAlignment = _module.LayoutAlignment
StandardButtonKind = _module.StandardButtonKind
AccessibleRole = _module.AccessibleRole
EventResult = _module.EventResult
MouseCursor = _module.MouseCursor
AnimationDirection = _module.AnimationDirection
TextVerticalAlignment = _module.TextVerticalAlignment
TextStrokeStyle = _module.TextStrokeStyle
LineCap = _module.LineCap
ImageHorizontalAlignment = _module.ImageHorizontalAlignment
FocusReason = _module.FocusReason
FillRule = _module.FillRule
ColorScheme = _module.ColorScheme
PathEvent = _module.PathEvent
TestEnum = _module.TestEnum
DialogButtonRole = _module.DialogButtonRole
PopupClosePolicy = _module.PopupClosePolicy
MyDiag = Diag
Public_Struct = Secret_Struct
